/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type PostSendEmailRequestBody = {
    recipientEmail?: string | undefined;
    recipientName?: string | undefined;
    senderEmail?: string | undefined;
    senderName?: string | undefined;
    emailSubject?: string | undefined;
    emailContent?: string | undefined;
};

export type PostSendEmailResponse = {
    httpMeta: components.HTTPMetadata;
};

/** @internal */
export namespace PostSendEmailRequestBody$ {
    export type Inbound = {
        recipientEmail?: string | undefined;
        recipientName?: string | undefined;
        senderEmail?: string | undefined;
        senderName?: string | undefined;
        emailSubject?: string | undefined;
        emailContent?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostSendEmailRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            recipientEmail: z.string().optional(),
            recipientName: z.string().optional(),
            senderEmail: z.string().optional(),
            senderName: z.string().optional(),
            emailSubject: z.string().optional(),
            emailContent: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.recipientEmail === undefined ? null : { recipientEmail: v.recipientEmail }),
                ...(v.recipientName === undefined ? null : { recipientName: v.recipientName }),
                ...(v.senderEmail === undefined ? null : { senderEmail: v.senderEmail }),
                ...(v.senderName === undefined ? null : { senderName: v.senderName }),
                ...(v.emailSubject === undefined ? null : { emailSubject: v.emailSubject }),
                ...(v.emailContent === undefined ? null : { emailContent: v.emailContent }),
            };
        });

    export type Outbound = {
        recipientEmail?: string | undefined;
        recipientName?: string | undefined;
        senderEmail?: string | undefined;
        senderName?: string | undefined;
        emailSubject?: string | undefined;
        emailContent?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostSendEmailRequestBody> = z
        .object({
            recipientEmail: z.string().optional(),
            recipientName: z.string().optional(),
            senderEmail: z.string().optional(),
            senderName: z.string().optional(),
            emailSubject: z.string().optional(),
            emailContent: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.recipientEmail === undefined ? null : { recipientEmail: v.recipientEmail }),
                ...(v.recipientName === undefined ? null : { recipientName: v.recipientName }),
                ...(v.senderEmail === undefined ? null : { senderEmail: v.senderEmail }),
                ...(v.senderName === undefined ? null : { senderName: v.senderName }),
                ...(v.emailSubject === undefined ? null : { emailSubject: v.emailSubject }),
                ...(v.emailContent === undefined ? null : { emailContent: v.emailContent }),
            };
        });
}

/** @internal */
export namespace PostSendEmailResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
    };

    export const inboundSchema: z.ZodType<PostSendEmailResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostSendEmailResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
            };
        });
}
